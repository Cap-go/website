---
import { numberWithSpaces } from '@/services/misc'
import type { Database } from '@/services/supabase.types'
import { getRelativeLocaleUrl } from 'astro:i18n'
import * as m from '@/paraglide/messages'

interface Props {
  pricing: Database['public']['Tables']['plans']['Row'][]
  yearly: boolean
}

const { pricing, yearly } = Astro.props

function descToText(desc: string) {
  switch (desc) {
    case 'plan.solo.desc':
      return m.plan_solo_desc({}, { locale: Astro.locals.locale })
    case 'plan.maker.desc':
      return m.plan_maker_desc({}, { locale: Astro.locals.locale })
    case 'plan.team.desc':
      return m.plan_team_desc({}, { locale: Astro.locals.locale })
    default:
      return desc
  }
}

function descToEmoji(desc: string) {
  switch (desc) {
    case 'plan.solo.desc':
      return 'ðŸ¤˜'
    case 'plan.maker.desc':
      return 'ðŸ’ª'
    case 'plan.team.desc':
      return 'ðŸš€'
    default:
      return desc
  }
}
---

<section id="plans">
  <div class="mt-6 grid grid-cols-1 space-y-14 sm:mt-8 sm:space-y-0 lg:mt-10 lg:grid-cols-3 lg:gap-8">
    {
      pricing.map((plan) => (
        <div
          class:list={[
            'relative divide-y divide-gray-200 rounded-2xl border bg-white shadow-xl sm:rounded-3xl',
            {
              'divide-blue-200 border-blue-600': plan.name === 'Maker',
              'divide-gray-200 border-gray-200': plan.name !== 'Maker',
            },
          ]}
          data-plan={plan.name}
        >
          {plan.name === 'Maker' && (
            <div class="absolute top-0 right-0 -mt-8 flex items-start">
              <svg class="h-16 w-auto text-blue-600" viewBox="0 0 83 64" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                <path d="M4.27758 62.7565C4.52847 63.5461 5.37189 63.9827 6.16141 63.7318L19.0274 59.6434C19.817 59.3925 20.2536 58.5491 20.0027 57.7595C19.7518 56.97 18.9084 56.5334 18.1189 56.7842L6.68242 60.4184L3.04824 48.982C2.79735 48.1924 1.95394 47.7558 1.16441 48.0067C0.374889 48.2576 -0.0617613 49.101 0.189127 49.8905L4.27758 62.7565ZM13.4871 47.8215L12.229 47.0047L13.4871 47.8215ZM39.0978 20.5925L38.1792 19.4067L39.0978 20.5925ZM7.03921 62.9919C8.03518 61.0681 13.1417 51.1083 14.7453 48.6383L12.229 47.0047C10.5197 49.6376 5.30689 59.8127 4.37507 61.6126L7.03921 62.9919ZM14.7453 48.6383C22.0755 37.3475 29.8244 29.6738 40.0164 21.7784L38.1792 19.4067C27.7862 27.4579 19.7827 35.3698 12.229 47.0047L14.7453 48.6383ZM40.0164 21.7784C52.6582 11.9851 67.634 7.57932 82.2576 3.44342L81.4412 0.556653C66.8756 4.67614 51.3456 9.20709 38.1792 19.4067L40.0164 21.7784Z" />
              </svg>
              <span class="-mt-2 ml-2 text-sm font-semibold text-blue-600">{m.most_popular({}, { locale: Astro.locals.locale })}</span>
            </div>
          )}
          <div class="rounded-t-2xl bg-gray-50 px-4 py-5 sm:rounded-t-3xl sm:p-6">
            <div class="flex items-start">
              <span class="shrink-0 text-3xl">{descToEmoji(plan.description)}</span>
              <div class="ml-6">
                <h3 class="text-lg font-semibold text-gray-900">{plan.name.toUpperCase()}</h3>
                <p class="mt-2 text-sm font-normal text-gray-500">{descToText(plan.description)}</p>
              </div>
            </div>
          </div>
          <div class="px-4 py-5 sm:p-6">
            <div class="flex items-end">
              <p class="text-5xl font-semibold text-gray-900" data-price>
                ${yearly ? (plan.price_y / 12).toFixed() : plan.price_m}
              </p>
              <p class="py-1 text-sm font-normal text-gray-500">/{m.month({}, { locale: Astro.locals.locale })}</p>
            </div>
            <p class="mt-8" data-yearly-price style={yearly ? '' : 'display: none'}>
              <span class="text-gray-900">
                {m.billed_annually_at({}, { locale: Astro.locals.locale })} ${plan.price_y}
              </span>
            </p>
            <div class="mt-6">
              <a
                href={getRelativeLocaleUrl(Astro.locals.locale, 'register')}
                target="_blank"
                title="register"
                class:list={[
                  'inline-flex w-full items-center justify-center rounded-xl border border-transparent px-6 py-3 text-base font-medium text-white transition-all duration-200 hover:opacity-80 focus:opacity-80 focus:ring-2 focus:ring-offset-2 focus:outline-none',
                  {
                    'bg-linear-to-r from-fuchsia-600 to-blue-600': plan.name === 'Maker',
                    'bg-blue-500': plan.name !== 'Maker',
                  },
                ]}
                role="button"
              >
                {m.days_free_trial({}, { locale: Astro.locals.locale })}
              </a>
            </div>
            <ul class="mt-8 space-y-4 text-black">
              <li class="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="mr-1 h-6 w-6 shrink-0 text-blue-600" width="32" height="32" viewBox="0 0 32 32">
                  <path
                    fill="currentColor"
                    d="M23 23c-5.656 0-7.858-6.41-7.949-6.684C15.034 16.265 13.208 11 9 11c-2.757 0-5 2.243-5 5s2.243 5 5 5c1.588 0 3.013-.732 4.237-2.176l1.526 1.293C13.164 22.003 11.172 23 9 23c-3.86 0-7-3.14-7-7s3.14-7 7-7c5.656 0 7.858 6.41 7.949 6.684C16.966 15.735 18.792 21 23 21c2.757 0 5-2.243 5-5s-2.243-5-5-5c-1.588 0-3.013.732-4.237 2.176l-1.526-1.293C18.836 9.997 20.828 9 23 9c3.86 0 7 3.14 7 7s-3.14 7-7 7"
                  />
                </svg>
                <span>{m.unlimited_live_updates({}, { locale: Astro.locals.locale })}</span>
              </li>
              <li class="flex items-center">
                <svg class="mr-2 h-5 w-5 shrink-0 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="currentColor" height="1em" viewBox="0 0 448 512">
                  <path d="M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z" />
                </svg>
                <span>
                  <span class="font-bold">{numberWithSpaces(plan.mau)}</span> {m.monthly_active_users({}, { locale: Astro.locals.locale })}
                </span>
              </li>
              <li class="flex items-center">
                <svg class="mr-2 h-5 w-5 shrink-0 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="currentColor" height="1em" viewBox="0 0 448 512">
                  <path d="M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z" />
                </svg>
                <span>
                  <span class="font-bold">{numberWithSpaces(plan.bandwidth)}</span> GB/{m.month({}, { locale: Astro.locals.locale })}
                  {m.of_bandwidth({}, { locale: Astro.locals.locale })}
                </span>
              </li>
              <li class="flex items-center">
                <svg class="mr-2 h-5 w-5 shrink-0 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="currentColor" height="1em" viewBox="0 0 448 512">
                  <path d="M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z" />
                </svg>
                <span>
                  <span class="font-bold">{numberWithSpaces(plan.storage)}</span> GB {m.of_storage({}, { locale: Astro.locals.locale })}
                </span>
              </li>
              <li class="flex items-center">
                <svg class="mr-2 h-5 w-5 shrink-0 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="currentColor" height="1em" viewBox="0 0 448 512">
                  <path d="M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z" />
                </svg>
                <span set:html={m.priority_support_for_all_capgo_plugins({}, { locale: Astro.locals.locale })} />
              </li>
            </ul>
          </div>
        </div>
      ))
    }
  </div>
</section>

<script define:vars={{ pricing }}>
  document.addEventListener('DOMContentLoaded', () => {
    const yearlyRadio = document.getElementById('yearly')
    const monthlyRadio = document.getElementById('monthly')
    const planElements = document.querySelectorAll('[data-plan]')

    function updatePrices(isYearly) {
      planElements.forEach((planElement) => {
        const planName = planElement.getAttribute('data-plan')
        const plan = pricing.find((p) => p.name === planName)
        if (!plan) return

        const priceElement = planElement.querySelector('[data-price]')
        const yearlyPriceElement = planElement.querySelector('[data-yearly-price]')

        if (priceElement) {
          priceElement.textContent = `$${isYearly ? (plan.price_y / 12).toFixed() : plan.price_m}`
        }

        if (yearlyPriceElement) {
          yearlyPriceElement.style.display = isYearly ? '' : 'none'
        }
      })
    }
    yearlyRadio.addEventListener('change', () => updatePrices(true))
    monthlyRadio.addEventListener('change', () => updatePrices(false))
  })
</script>
