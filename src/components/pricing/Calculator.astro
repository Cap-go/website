---
import * as m from '@/paraglide/messages'

// Initial values for the calculator
const initialMau = 5000000
const initialUpdatesSize = 4
const initialUpdatesByMonth = 1

// Initial calculations
const initialUpdates = initialMau * initialUpdatesByMonth
const initialBandwidth = (initialUpdates * initialUpdatesSize) / 1024 // Convert MB to GiB
const initialStorage = (initialUpdatesSize / 1024) // Convert MB to GiB
---

<section id="calculator" class="mx-auto max-w-7xl px-0 py-12 sm:px-6 lg:px-8">
  <div class="max-w-7xl mx-auto">
    <!-- Header -->
    <div class="text-center mb-8">
      <h1 class="text-3xl font-bold text-gray-900 mb-3">
        {m.calculate_your_usage({}, { locale: Astro.locals.locale })}
      </h1>
      <p class="text-gray-600 max-w-2xl mx-auto">
        {m.calculate_your_usage_description({}, { locale: Astro.locals.locale })}
      </p>
    </div>

    <!-- Main Calculator -->
    <div class="bg-white rounded-2xl shadow-lg border border-gray-200 overflow-hidden">
      
      <!-- User Inputs Section -->
      <div class="bg-gray-100 px-8 py-6 border-b border-gray-200">
        <h2 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">
          <svg class="w-5 h-5 mr-2 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
          </svg>
{m.your_configuration({}, { locale: Astro.locals.locale })}
        </h2>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              {m.monthly_active_users_mau({}, { locale: Astro.locals.locale })}
            </label>
            <input 
              id="mau-input"
              type="number" 
              value={initialMau}
              class="w-full px-4 py-3 bg-white text-gray-700 border border-gray-300 rounded-lg focus:ring-2 focus:ring-gray-500 focus:border-blue-500 transition-colors"
              placeholder="5,000,000"
            />
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              {m.updates_per_month({}, { locale: Astro.locals.locale })}
            </label>
            <input 
              id="updates-by-month-input"
              type="number" 
              value={initialUpdatesByMonth}
              class="w-full px-4 py-3 bg-white text-gray-700 border border-gray-300 rounded-lg focus:ring-2 focus:ring-gray-500 focus:border-blue-500 transition-colors"
              placeholder="1"
            />
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              {m.update_size_mb({}, { locale: Astro.locals.locale })}
            </label>
            <input 
              id="updates-size-input"
              type="number" 
              step="0.1"
              value={initialUpdatesSize}
              class="w-full px-4 py-3 bg-white text-gray-700 border border-gray-300 rounded-lg focus:ring-2 focus:ring-gray-500 focus:border-blue-500 transition-colors"
              placeholder="4"
            />
          </div>
        </div>
      </div>

      <!-- Calculated Results Section -->
      <div class="px-8 py-6">
        <h2 class="text-lg font-semibold text-gray-900 mb-6 flex items-center">
          <svg class="w-5 h-5 mr-2 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"/>
          </svg>
{m.calculated_usage_pricing({}, { locale: Astro.locals.locale })}
        </h2>

        <!-- Usage Metrics -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <!-- MAU -->
          <div class="bg-gray-100 rounded-xl p-4 border border-gray-200">
            <div class="flex items-center mb-2">
              <svg class="w-5 h-5 mr-2 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"/>
              </svg>
              <span class="text-sm font-medium text-gray-200">MAU</span>
            </div>
            <p class="text-2xl font-bold text-gray-900" data-mau-display>{initialMau.toLocaleString()}</p>
            <p class="text-xs text-gray-500 mt-1">{m.monthly_active_users_mau({}, { locale: Astro.locals.locale })}</p>
          </div>

          <!-- Bandwidth -->
          <div class="bg-gray-100 rounded-xl p-4 border border-orange-100">
            <div class="flex items-center mb-2">
              <svg class="w-4 h-4 mr-2 text-white" fill="currentColor" viewBox="0 0 24 24">
                <path d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"/>
              </svg>
              <span class="text-sm font-medium text-gray-200">Bandwidth</span>
            </div>
            <p class="text-2xl font-bold text-gray-900"><span data-bandwidth>{Math.round(initialBandwidth).toLocaleString()}</span></p>
            <p class="text-xs text-gray-500 mt-1">{m.total_data_transfer({}, { locale: Astro.locals.locale })}</p>
          </div>

          <!-- Storage -->
          <div class="bg-gray-100 rounded-xl p-4 border border-purple-100">
            <div class="flex items-center mb-2">
              <svg class="w-5 h-5 mr-2 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 19a2 2 0 01-2-2V7a2 2 0 012-2h4l2 2h4a2 2 0 012 2v1M5 19h14a2 2 0 002-2v-5a2 2 0 00-2-2H9a2 2 0 00-2 2v5a2 2 0 01-2 2z"/>
              </svg>
              <span class="text-sm font-medium text-gray-300">Storage</span>
            </div>
            <p class="text-2xl font-bold text-gray-900"><span data-storage>{initialStorage.toFixed(3)}</span></p>
            <p class="text-xs text-gray-500 mt-1">{m.required_storage_space({}, { locale: Astro.locals.locale })}</p>
          </div>

          <!-- Total Credits Cost -->
          <div class="bg-gray-900 rounded-xl p-4 border border-gray-200">
            <div class="flex items-center mb-2">
              <svg class="w-5 h-5 mr-2 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"/>
              </svg>
              <span class="text-sm font-medium text-gray-300">{m.credits_cost({}, { locale: Astro.locals.locale })}</span>
            </div>
            <p class="text-2xl font-bold text-white" data-total-price>
              <span class="loading-spinner">...</span>
            </p>
            <p class="text-xs text-gray-400 mt-1">{m.monthly_total({}, { locale: Astro.locals.locale })}</p>
          </div>
        </div>

        <!-- Pricing Tiers -->
        <div class="border border-gray-200 rounded-xl">
          <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="font-medium text-gray-900">{m.cost_breakdown_pricing_tiers({}, { locale: Astro.locals.locale })}</h3>
          </div>
          
          <div class="px-6 py-6">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
              <!-- MAU Tiers -->
              <div data-mau-tiers>
                <div class="flex items-center justify-between mb-3">
                  <h4 class="font-medium text-gray-900 flex items-center">
                    <svg class="w-5 h-5 mr-2 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"/>
                    </svg>
                    {m.mau({}, { locale: Astro.locals.locale })}:
                  </h4>
                  <span class="text-lg font-bold text-gray-200" data-mau-total>$0.00</span>
                </div>
                <div class="space-y-2" data-mau-tier-list></div>
              </div>

              <!-- Bandwidth Tiers -->
              <div data-bandwidth-tiers>
                <div class="flex items-center justify-between mb-3">
                  <h4 class="font-medium text-gray-900 flex items-center">
                    <svg class="w-4 h-4 mr-2 text-white" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"/>
                    </svg>
                    {m.bandwidth({}, { locale: Astro.locals.locale })}:
                  </h4>
                  <span class="text-lg font-bold text-gray-200" data-bandwidth-total>$0.00</span>
                </div>
                <div class="space-y-2" data-bandwidth-tier-list></div>
              </div>

              <!-- Storage Tiers -->
              <div data-storage-tiers>
                <div class="flex items-center justify-between mb-3">
                  <h4 class="font-medium text-gray-900 flex items-center">
                    <svg class="w-5 h-5 mr-2 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 19a2 2 0 01-2-2V7a2 2 0 012-2h4l2 2h4a2 2 0 012 2v1M5 19h14a2 2 0 002-2v-5a2 2 0 00-2-2H9a2 2 0 00-2 2v5a2 2 0 01-2 2z"/>
                    </svg>
                    {m.storage({}, { locale: Astro.locals.locale })}:
                  </h4>
                  <span class="text-lg font-bold text-gray-200" data-storage-total>$0.00</span>
                </div>
                <div class="space-y-2" data-storage-tier-list></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  interface TierUsage {
    tier_id: number
    step_min: number
    step_max: number
    unit_factor: number
    units_used: number // billing units (GiB for bandwidth/storage, count for MAU)
    price_per_unit: number // Price per billing unit
    cost: number
  }

  interface MetricBreakdown {
    cost: number
    tiers: TierUsage[]
  }

  interface CostCalculationResponse {
    total_cost: number
    breakdown: {
      mau: MetricBreakdown
      bandwidth: MetricBreakdown
      storage: MetricBreakdown
    }
    usage: {
      mau: number
      bandwidth: number
      storage: number
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const mauInput = document.getElementById('mau-input') as HTMLInputElement
    const updatesSizeInput = document.getElementById('updates-size-input') as HTMLInputElement
    const updatesByMonthInput = document.getElementById('updates-by-month-input') as HTMLInputElement

    let debounceTimer: NodeJS.Timeout

    async function calculateCreditPrice(mau: number, bandwidthGiB: number, storageGiB: number) {
      // Convert GiB to bytes
      const bandwidthBytes = bandwidthGiB * 1024 * 1024 * 1024
      const storageBytes = storageGiB * 1024 * 1024 * 1024

      try {
        const response = await fetch('https://api.capgo.app/private/credits', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json; charset=utf-8',
            'Accept-Encoding': 'gzip, zlib, deflate, zstd, br'
          },
          body: JSON.stringify({
            mau: mau.toString(),
            bandwidth: bandwidthBytes.toString(),
            storage: storageBytes.toString()
          })
        })

        if (!response.ok) {
          throw new Error('Failed to calculate price')
        }

        const data: CostCalculationResponse = await response.json()
        return data
      } catch (error) {
        console.error('Error calculating credit price:', error)
        return null
      }
    }

    function formatNumber(num: number, type?: string): string {
      // Convert bytes to GiB for bandwidth and storage
      if (type === 'bandwidth' || type === 'storage') {
        const gb = num / (1024 * 1024 * 1024) // Convert bytes to GiB
        if (gb >= 1000) {
          return `${(gb / 1000).toFixed(0)} TB`
        }
        return `${gb.toFixed(0)} GiB`
      }
      
      // Handle already-converted GiB values for display
      if (type === 'bandwidth-gb' || type === 'storage-gb') {
        if (num >= 1000) {
          return `${Math.ceil(num / 1000)} TB`
        }
        return `${Math.ceil(num)} GiB`
      }
      
      if (num >= 1000000) {
        return `${(num / 1000000).toFixed(1)}M`
      }
      if (num >= 1000) {
        return `${(num / 1000).toFixed(0)}k`
      }
      return num.toString()
    }

    function formatPrice(price: number): string {
      return price.toLocaleString('en-US', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      })
    }

    function formatPricePerUnit(price: number, metricType: string): string {
      const decimals = metricType === 'mau' ? 4 : 3
      return price.toLocaleString('en-US', {
        minimumFractionDigits: 0,
        maximumFractionDigits: decimals
      })
    }

    function renderTiers(tiers: TierUsage[], containerSelector: string, metricType: string) {
      const container = document.querySelector(containerSelector)
      if (!container || !tiers || tiers.length === 0) return

      container.innerHTML = ''
      
      tiers.forEach((tier, index) => {
        if (tier.units_used > 0) {
          const tierDiv = document.createElement('div')
          tierDiv.className = 'bg-gray-50 rounded-lg p-3 border border-gray-200'
          
          // Tier range and usage
          const tierHeader = document.createElement('div')
          tierHeader.className = 'flex justify-between items-center mb-2'
          
          // Check if this is the last tier and has a very large step_max
          const isLastTier = index === tiers.length - 1
          const isVeryLargeMax = tier.step_max > 1000000 // 1M+ units indicates unlimited tier
          
          let formattedRange
          if (isLastTier && isVeryLargeMax) {
            formattedRange = `over ${formatNumber(tier.step_min, metricType)}`
          } else {
            formattedRange = `${formatNumber(tier.step_min, metricType)}-${formatNumber(tier.step_max, metricType)}`
          }
          
          // For MAU, add unit label since formatNumber doesn't include it
          // For bandwidth/storage, formatNumber already includes units (GiB/TB)
          const displayRange = metricType === 'mau' ? `${formattedRange} MAU` : formattedRange
          
          tierHeader.innerHTML = `
            <span class="text-sm font-medium text-gray-700">${displayRange}</span>
            <span class="text-sm font-bold text-gray-900">$${formatPrice(tier.cost)}</span>
          `
          
          // Usage details
          const tierDetails = document.createElement('div')
          tierDetails.className = 'flex justify-between items-center text-xs text-gray-500'
          
          const rateLabel = metricType === 'mau' ? '/MAU' : '/GiB'
          // For MAU, add unit label since formatNumber doesn't include it
          // For bandwidth/storage, formatNumber already includes units (GiB/TB)
          const usedDisplay = metricType === 'mau' ? `${formatNumber(tier.units_used)} MAU used` : `${formatNumber(tier.units_used)} used`
          
          tierDetails.innerHTML = `
            <span>${usedDisplay}</span>
            <span>$${formatPricePerUnit(tier.price_per_unit, metricType)}${rateLabel}</span>
          `
          
          tierDiv.appendChild(tierHeader)
          tierDiv.appendChild(tierDetails)
          container.appendChild(tierDiv)
        }
      })
    }

    async function updateCalculations() {
      const mau = Number(mauInput.value) || 0
      const updatesSize = Number(updatesSizeInput.value) || 0
      const updatesByMonth = Number(updatesByMonthInput.value) || 0

      const updates = mau * updatesByMonth
      const bandwidth = (updates * updatesSize) / 1024 // Convert MB to GiB
      const storage = updatesSize / 1024 // Convert MB to GiB

      // Update displayed values
      const mauDisplay = document.querySelector('[data-mau-display]')
      const storageElement = document.querySelector('[data-storage]')
      const bandwidthElement = document.querySelector('[data-bandwidth]')
      const totalPriceElement = document.querySelector('[data-total-price]')

      if (mauDisplay) mauDisplay.textContent = formatNumber(mau)
      if (storageElement) storageElement.textContent = formatNumber(storage, 'storage-gb')
      if (bandwidthElement) bandwidthElement.textContent = formatNumber(Math.round(bandwidth), 'bandwidth-gb')

      // Show loading state
      if (totalPriceElement) {
        totalPriceElement.innerHTML = '<span class="loading-spinner">...</span>'
      }

      // Debounce API calls
      clearTimeout(debounceTimer)
      debounceTimer = setTimeout(async () => {
        const creditData = await calculateCreditPrice(mau, bandwidth, storage)
        
        if (creditData && totalPriceElement) {
          totalPriceElement.textContent = `$${formatPrice(creditData.total_cost)}`
          


          // Render tier details and update totals
          if (creditData.breakdown) {
            // MAU Tiers
            if (creditData.breakdown.mau.tiers && creditData.breakdown.mau.tiers.length > 0) {
              renderTiers(creditData.breakdown.mau.tiers, '[data-mau-tier-list]', 'mau')
              const mauTotalElement = document.querySelector('[data-mau-total]')
              if (mauTotalElement) mauTotalElement.textContent = `$${formatPrice(creditData.breakdown.mau.cost)}`
            }

            // Bandwidth Tiers
            if (creditData.breakdown.bandwidth.tiers && creditData.breakdown.bandwidth.tiers.length > 0) {
              renderTiers(creditData.breakdown.bandwidth.tiers, '[data-bandwidth-tier-list]', 'bandwidth')
              const bandwidthTotalElement = document.querySelector('[data-bandwidth-total]')
              if (bandwidthTotalElement) bandwidthTotalElement.textContent = `$${formatPrice(creditData.breakdown.bandwidth.cost)}`
            }

            // Storage Tiers
            if (creditData.breakdown.storage.tiers && creditData.breakdown.storage.tiers.length > 0) {
              renderTiers(creditData.breakdown.storage.tiers, '[data-storage-tier-list]', 'storage')
              const storageTotalElement = document.querySelector('[data-storage-total]')
              if (storageTotalElement) storageTotalElement.textContent = `$${formatPrice(creditData.breakdown.storage.cost)}`
            }
          }
        }
      }, 500)
    }

    mauInput.addEventListener('input', updateCalculations)
    updatesSizeInput.addEventListener('input', updateCalculations)
    updatesByMonthInput.addEventListener('input', updateCalculations)

    // Initial calculation
    updateCalculations()
  })
</script>

<style>
  .loading-spinner {
    display: inline-block;
    animation: pulse 1.5s ease-in-out infinite;
  }
  
  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }
</style>
