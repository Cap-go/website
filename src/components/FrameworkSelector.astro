---
// FrameworkSelector.astro - Framework selection buttons for conditional steps
interface FrameworkOption {
  id: string
  name: string
  icon: string
}

const frameworks: FrameworkOption[] = [
  { id: 'js', name: 'JS + DOM API', icon: '/icons/js.svg' },
  { id: 'ts', name: 'TS + DOM API', icon: '/icons/ts.svg' },
  { id: 'react', name: 'React', icon: '/icons/react.svg' },
  { id: 'angular', name: 'Angular', icon: '/icons/angular.svg' },
  { id: 'vue', name: 'Vue', icon: '/icons/vue.svg' },
  { id: 'svelte', name: 'Svelte', icon: '/icons/svelte.svg' },
  { id: 'qwik', name: 'Qwik', icon: '/icons/qwik.svg' },
]
---

<div class="framework-selector">
  {
    frameworks.map((framework) => (
      <button class="framework-button" data-framework={framework.id} aria-label={`Select ${framework.name}`}>
        <div class="framework-icon">
          <img src={framework.icon} alt={framework.name} />
        </div>
        <div class="framework-name">{framework.name}</div>
      </button>
    ))
  }
</div>

<style>
  .framework-selector {
    display: flex;
    flex-wrap: wrap;
    max-width: 600px;
    gap: 10px;
    margin: 1rem auto;
    justify-content: center;
    align-items: stretch; /* All buttons same height */
    width: 100%;
  }

  .framework-button {
    flex: 0 0 calc(25% - 7.5px); /* 4 buttons per row with 10px gaps */
    aspect-ratio: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 8px;
    border: 2px solid var(--sl-color-gray-5);
    border-radius: 8px;
    background-color: var(--sl-color-black);
    color: var(--sl-color-white);
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    padding: 12px;
    position: relative;
    overflow: hidden;
    height: 120px; /* Fixed height instead of min-height */
    max-width: 140px;
    box-sizing: border-box;
    margin: 0 !important; /* Reset any inherited margins */
    --framework-border: var(--sl-color-blue);
    --framework-border-rgb: 62, 138, 204;
  }

  .framework-button:hover {
    transform: translateY(-4px) scale(1.02);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
    border-color: var(--framework-border);
    background-color: hsl(224, 10%, 10%);
  }

  /* Light mode hover background */
  :root[data-theme='light'] .framework-button:hover {
    background-color: hsl(224, 10%, 95%);
  }

  .framework-button:active {
    transform: translateY(0) scale(0.98);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    transition: all 0.1s ease;
  }

  .framework-button.selected {
    border-color: var(--framework-border);
    background-color: var(--framework-border);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(var(--framework-border-rgb), 0.4);
  }

  .framework-button:hover::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(var(--framework-border-rgb), 0.12);
    z-index: 1;
    pointer-events: none;
  }

  /* Different colors for each framework */
  .framework-button[data-framework='js'] {
    --framework-border: #fbbf24;
    --framework-border-rgb: 251, 191, 36;
  }

  /* Black text for JS button when selected */
  .framework-button[data-framework='js'].selected {
    color: black;
  }

  .framework-button[data-framework='ts'] {
    --framework-border: #2563eb;
    --framework-border-rgb: 37, 99, 235;
  }

  .framework-button[data-framework='react'] {
    --framework-border: #61dafb;
    --framework-border-rgb: 97, 218, 251;
  }

  .framework-button[data-framework='angular'] {
    --framework-border: #ef4444;
    --framework-border-rgb: 239, 68, 68;
  }

  .framework-button[data-framework='vue'] {
    --framework-border: #4fc08d;
    --framework-border-rgb: 79, 192, 141;
  }

  .framework-button[data-framework='svelte'] {
    --framework-border: #ff6b35;
    --framework-border-rgb: 255, 107, 53;
  }

  .framework-button[data-framework='qwik'] {
    --framework-border: #ac7ef4;
    --framework-border-rgb: 172, 126, 244;
  }

  .framework-icon {
    position: relative;
    z-index: 2;
    height: 2.5rem; /* Fixed height to ensure consistent positioning */
    width: 2.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .framework-icon img {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .framework-name {
    font-size: 0.875rem;
    font-weight: 600;
    text-align: center;
    line-height: 1.2;
    position: relative;
    z-index: 2;
    height: 2.4em; /* Fixed height to prevent misalignment */
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Responsive adjustments */
  @media (max-width: 640px) {
    .framework-button {
      flex: 0 0 calc(50% - 5px); /* 2 buttons per row */
      height: 100px;
    }

    .framework-icon {
      height: 2rem;
      width: 2rem;
    }

    .framework-name {
      font-size: 0.75rem;
      height: 2em;
    }
  }

  @media (max-width: 480px) {
    .framework-button {
      flex: 0 0 calc(100% - 0px); /* 1 button per row */
      max-width: 200px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const frameworkButtons = document.querySelectorAll('.framework-button')

    frameworkButtons.forEach((button) => {
      button.addEventListener('click', function (event) {
        const clickedButton = event.currentTarget as HTMLElement

        // Remove selected class from all buttons
        frameworkButtons.forEach((btn) => btn.classList.remove('selected'))

        // Add selected class to clicked button
        clickedButton.classList.add('selected')

        // Trigger the conditional step visibility
        const customEvent = new CustomEvent('frameworkSelected', {
          detail: { framework: clickedButton.getAttribute('data-framework') },
        })
        document.dispatchEvent(customEvent)
      })
    })
  })
</script>
