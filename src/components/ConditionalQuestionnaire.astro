---
import { Aside } from '@astrojs/starlight/components'
import FrameworkSelector from '@/components/FrameworkSelector.astro'

// Question flow data structure
const questionFlow = {
  q1: {
    type: 'framework_selector',
    question: 'What language/framework do you primarily use in your app?',
    component: 'FrameworkSelector',
    next: {
      js: 'q2_js_ts',
      ts: 'q2_js_ts',
      react: 'q2_react_framework',
      angular: 'q2_angular_framework',
      vue: 'q2_vue_framework',
      svelte: 'q2_svelte_framework',
      qwik: 'q2_qwik_framework',
    },
  },
  q2_js_ts: {
    type: 'buttons',
    question: 'Where do you put your script in the HTML document?',
    answers: [
      {
        id: 'head',
        text: 'In the &lt;head&gt; section',
        next: 'q3_script_type',
      },
      {
        id: 'body',
        text: 'At the end of &lt;body&gt; (before closing tag)',
        next: 'q4_body_script',
      },
    ],
  },
  q2_react_framework: {
    type: 'framework_buttons',
    question: 'What React framework/setup are you using?',
    frameworks: [
      { id: 'ionic', name: 'Ionic', icon: '/icons/ionic.svg' },
      { id: 'nextjs', name: 'Next.js', icon: '/icons/nextjs.svg' },
      { id: 'vite', name: 'Vite + React SPA', icon: '/icons/vite.svg' },
      { id: 'react-router', name: 'React Router', icon: '/icons/react-router.svg' },
      { id: 'create-react-app', name: 'Legacy Create React App', icon: '/icons/creact-react-app.svg' },
    ],
    next: {
      ionic: 'q3_ionic_react',
      nextjs: 'q3_nextjs_final',
      vite: 'q3_vite_react',
      'react-router': 'q3_react_router',
      'create-react-app': 'q3_cra_react',
    },
  },
  q2_angular_framework: {
    type: 'framework_buttons',
    question: 'What Angular framework/setup are you using?',
    frameworks: [
      { id: 'ionic-angular', name: 'Ionic', icon: '/icons/ionic.svg' },
      { id: 'vite-angular', name: 'Vite + Angular SPA', icon: '/icons/vite.svg' },
      { id: 'ng-cli', name: 'Angular CLI (ng)', icon: '/icons/ng.svg' },
    ],
    next: {
      'ionic-angular': 'q3_ionic_angular',
      'vite-angular': 'q3_vite_angular',
      'ng-cli': 'q3_ng_cli',
    },
  },
  q2_vue_framework: {
    type: 'framework_buttons',
    question: 'What Vue framework/setup are you using?',
    frameworks: [
      { id: 'ionic-vue', name: 'Ionic', icon: '/icons/ionic.svg' },
      { id: 'vite-vue', name: 'Vite + Vue SPA', icon: '/icons/vite.svg' },
      { id: 'nuxt', name: 'Nuxt', icon: '/icons/nuxt.svg' },
    ],
    next: {
      'ionic-vue': 'q3_ionic_vue',
      'vite-vue': 'q3_vite_vue',
      nuxt: 'q3_nuxt',
    },
  },
  q2_svelte_framework: {
    type: 'framework_buttons',
    question: 'What Svelte framework/setup are you using?',
    frameworks: [
      { id: 'vite-svelte', name: 'Vite + Svelte SPA', icon: '/icons/vite.svg' },
      { id: 'sveltekit', name: 'SvelteKit', icon: '/icons/svelte.svg' },
    ],
    next: {
      'vite-svelte': 'q3_vite_svelte',
      sveltekit: 'q3_sveltekit',
    },
  },
  q2_qwik_framework: {
    type: 'framework_buttons',
    question: 'What Qwik framework/setup are you using?',
    frameworks: [
      { id: 'vite-qwik', name: 'Vite + Qwik SPA', icon: '/icons/vite.svg' },
      { id: 'qwik-city', name: 'Qwik City', icon: '/icons/qwik.svg' },
    ],
    next: {
      'vite-qwik': 'q3_vite_qwik',
      'qwik-city': 'q3_qwik_city',
    },
  },
  q3_ionic_react: {
    type: 'final',
    question: 'Place the <code>notifyAppReady()</code> call',
    text: 'For Ionic React, edit your `src/main.tsx` file to add the import and call:',
    warning: 'You <b>MUST</b> put <code>CapacitorUpdater.notifyAppReady();</code> before running any other code',
    code: {
      default: `import React from 'react';
import { createRoot } from 'react-dom/client';
+ import { CapacitorUpdater } from '@capgo/capacitor-updater'
import App from './App';

+ CapacitorUpdater.notifyAppReady();
const container = document.getElementById('root');
const root = createRoot(container!);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);`,
    },
  },
  q3_react_final: {
    type: 'final',
    question: 'Place the <code>notifyAppReady()</code> call',
    text: 'For React frameworks, place the call in your main entry point (usually main.jsx/tsx or index.js/tsx):',
    warning: 'You <b>MUST</b> put <code>CapacitorUpdater.notifyAppReady();</code> before running any other code',
    code: {
      default: `import { CapacitorUpdater } from '@capgo/capacitor-updater'

// Call this first!
CapacitorUpdater.notifyAppReady();

// Your app initialization code here`,
    },
  },
  q3_nextjs_final: {
    type: 'final',
    question: 'Place the <code>notifyAppReady()</code> call',
    text: 'For Next.js, create or modify your <code>instrumentation-client.ts</code> (<a href="https://nextjs.org/docs/app/api-reference/file-conventions/instrumentation-client" target="_blank">docs</a>) file in the root of your project:',
    warning: 'You <b>MUST</b> put <code>CapacitorUpdater.notifyAppReady();</code> before running any other code',
    code: {
      default: `import { CapacitorUpdater } from '@capgo/capacitor-updater'

// Call this first!
CapacitorUpdater.notifyAppReady();

// Rest of your instrumentation code here`,
    },
  },
  q3_vite_react: {
    type: 'final',
    question: 'Place the <code>notifyAppReady()</code> call',
    text: 'For Vite + React SPA, edit your <code>src/main.tsx</code> file to add the import and call:',
    warning: 'You <b>MUST</b> put <code>CapacitorUpdater.notifyAppReady();</code> before running any other code',
    code: {
      default: `import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
+ import { CapacitorUpdater } from '@capgo/capacitor-updater'
import './index.css'
import App from './App.tsx'

+ CapacitorUpdater.notifyAppReady();
createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)`,
    },
  },
  q3_react_router: {
    type: 'final',
    question: 'Place the <code>notifyAppReady()</code> call',
    text: 'For React Router, create or modify your <code>app/entry.client.tsx</code> (<a href="https://reactrouter.com/api/framework-conventions/entry.client.tsx" target="_blank">docs</a>) file to add the import and call:',
    warning: 'You <b>MUST</b> put <code>CapacitorUpdater.notifyAppReady();</code> before any other code in <code>entry.client.tsx</code>',
    code: {
      default: `import { startTransition, StrictMode } from "react";
import { hydrateRoot } from "react-dom/client";
import { HydratedRouter } from "react-router/dom";
+ import { CapacitorUpdater } from '@capgo/capacitor-updater'

+ CapacitorUpdater.notifyAppReady();

// Rest of your entry.client.tsx code

startTransition(() => {
  hydrateRoot(
    document,
    <StrictMode>
      <HydratedRouter />
    </StrictMode>
  );
});`,
    },
  },
  q3_cra_react: {
    type: 'final',
    question: 'Place the <code>notifyAppReady()</code> call',
    text: 'For Create React App, modify your <code>src/index.js</code> file to add the import and call:',
    warning: 'You <b>MUST</b> put <code>CapacitorUpdater.notifyAppReady();</code> before running any other code',
    code: {
      default: `import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
+ import { CapacitorUpdater } from '@capgo/capacitor-updater'

// Call before calling any other code
+ CapacitorUpdater.notifyAppReady();

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();`,
    },
  },
  q3_ionic_angular: {
    type: 'final',
    question: 'Place the <code>notifyAppReady()</code> call',
    text: 'For Ionic Angular, modify your <code>src/main.ts</code> file to add the import and call:',
    warning: 'You <b>MUST</b> put <code>CapacitorUpdater.notifyAppReady();</code> before running any other code',
    code: {
      default: `import { bootstrapApplication } from '@angular/platform-browser';
import { RouteReuseStrategy, provideRouter, withPreloading, PreloadAllModules } from '@angular/router';
import { IonicRouteStrategy, provideIonicAngular } from '@ionic/angular/standalone';
+ import { CapacitorUpdater } from '@capgo/capacitor-updater'

import { routes } from './app/app.routes';
import { AppComponent } from './app/app.component';

// Call the CapacitorUpdater.notifyAppReady() before any other code
+ CapacitorUpdater.notifyAppReady();

bootstrapApplication(AppComponent, {
  providers: [
    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy },
    provideIonicAngular(),
    provideRouter(routes, withPreloading(PreloadAllModules)),
  ],
});`,
    },
  },
  q3_vite_angular: {
    type: 'final',
    question: 'Place the <code>notifyAppReady()</code> call',
    text: 'For Vite + Angular SPA, modify your <code>src/main.ts</code> file to add the import and call:',
    warning: 'You <b>MUST</b> put <code>CapacitorUpdater.notifyAppReady();</code> before running any other code',
    code: {
      default: `import { bootstrapApplication } from '@angular/platform-browser';
+ import { CapacitorUpdater } from '@capgo/capacitor-updater'
import { appConfig } from './app/app.config';
import { App } from './app/app';

// Call the CapacitorUpdater.notifyAppReady() before any other code
+ CapacitorUpdater.notifyAppReady();

bootstrapApplication(App, appConfig)
  .catch((err) => console.error(err));`,
    },
  },
  q3_ng_cli: {
    type: 'final',
    question: 'Place the <code>notifyAppReady()</code> call',
    text: 'For Angular CLI, modify your <code>src/main.ts</code> file to add the import and call:',
    warning: 'You <b>MUST</b> put <code>CapacitorUpdater.notifyAppReady();</code> before running any other code',
    code: {
      default: `import { bootstrapApplication } from '@angular/platform-browser';
+ import { CapacitorUpdater } from '@capgo/capacitor-updater'
import { appConfig } from './app/app.config';
import { App } from './app/app';

// Call the CapacitorUpdater.notifyAppReady() before any other code
+ CapacitorUpdater.notifyAppReady();

bootstrapApplication(App, appConfig)
  .catch((err) => console.error(err));`,
    },
  },
  q3_ionic_vue: {
    type: 'final',
    question: 'Place the <code>notifyAppReady()</code> call',
    text: 'For Ionic Vue, modify your <code>src/main.ts</code> file to add the import and call:',
    warning: 'You <b>MUST</b> put <code>CapacitorUpdater.notifyAppReady();</code> before running any other code',
    code: {
      default: `import { createApp } from 'vue'
+ import { CapacitorUpdater } from '@capgo/capacitor-updater'
import App from './App.vue'
import router from './router';

import { IonicVue } from '@ionic/vue';

/* Core CSS required for Ionic components to work properly */
import '@ionic/vue/css/core.css';

/* Basic CSS for apps built with Ionic */
import '@ionic/vue/css/normalize.css';
import '@ionic/vue/css/structure.css';
import '@ionic/vue/css/typography.css';

/* Optional CSS utils that can be commented out */
import '@ionic/vue/css/padding.css';
import '@ionic/vue/css/float-elements.css';
import '@ionic/vue/css/text-alignment.css';
import '@ionic/vue/css/text-transformation.css';
import '@ionic/vue/css/flex-utils.css';
import '@ionic/vue/css/display.css';

/**
 * Ionic Dark Mode
 * -----------------------------------------------------
 * For more info, please see:
 * https://ionicframework.com/docs/theming/dark-mode
 */

/* @import '@ionic/vue/css/palettes/dark.always.css'; */
/* @import '@ionic/vue/css/palettes/dark.class.css'; */
import '@ionic/vue/css/palettes/dark.system.css';

/* Theme variables */
import './theme/variables.css';

// Call the CapacitorUpdater.notifyAppReady() before any other code
+ CapacitorUpdater.notifyAppReady();

const app = createApp(App)
  .use(IonicVue)
  .use(router);

router.isReady().then(() => {
  app.mount('#app');
});`,
    },
  },
  q3_vite_vue: {
    type: 'final',
    question: 'Place the <code>notifyAppReady()</code> call',
    text: 'For Vite + Vue SPA, modify your <code>src/main.ts</code> file to add the import and call:',
    warning: 'You <b>MUST</b> put <code>CapacitorUpdater.notifyAppReady();</code> before running any other code',
    code: {
      default: `import { createApp } from 'vue'
+ import { CapacitorUpdater } from '@capgo/capacitor-updater'
import './style.css'
import App from './App.vue'

// Call the CapacitorUpdater.notifyAppReady() before any other code
+ CapacitorUpdater.notifyAppReady();

createApp(App).mount('#app')`,
    },
  },
  q3_nuxt: {
    type: 'final',
    question: 'Place the <code>notifyAppReady()</code> call',
    text: 'For Nuxt, create an <code>app/plugins/capacitorUpdater.client.ts</code> file in your project:',
    code: {
      default: `import { CapacitorUpdater } from '@capgo/capacitor-updater'

export default defineNuxtPlugin(() => {
  CapacitorUpdater.notifyAppReady()
})`,
    },
  },
  q3_vite_svelte: {
    type: 'final',
    question: 'Place the <code>notifyAppReady()</code> call',
    text: 'For Vite + Svelte SPA, modify your <code>src/main.ts</code> file to add the import and call:',
    warning: 'You <b>MUST</b> put <code>CapacitorUpdater.notifyAppReady();</code> before running any other code',
    code: {
      default: `import { mount } from 'svelte'
+ import { CapacitorUpdater } from '@capgo/capacitor-updater'
import './app.css'
import App from './App.svelte'

// Call the CapacitorUpdater.notifyAppReady() before any other code
+ CapacitorUpdater.notifyAppReady();

const app = mount(App, {
  target: document.getElementById('app')!,
})

export default app`,
    },
  },
  q3_sveltekit: {
    type: 'final',
    question: 'Place the <code>notifyAppReady()</code> call',
    text: 'For SvelteKit, create or modify your <code>src/hooks.client.ts</code> file:',
    warning: 'You <b>MUST</b> put <code>CapacitorUpdater.notifyAppReady();</code> before running any other code',
    code: {
      default: `import type { ClientInit } from '@sveltejs/kit';
+ import { CapacitorUpdater } from '@capgo/capacitor-updater'

export const init: ClientInit = async () => {
    // Make sure you run CapacitorUpdater.notifyAppReady(); before any other code.
+   CapacitorUpdater.notifyAppReady();
    console.log('Client init');
};`,
    },
  },
  q3_vite_qwik: {
    type: 'final',
    question: 'Place the <code>notifyAppReady()</code> call',
    text: 'For Vite + Qwik SPA, modify your <code>src/main.tsx</code> file to add the import and call:',
    warning: 'You <b>MUST</b> put <code>CapacitorUpdater.notifyAppReady();</code> before running any other code',
    code: {
      default: `import '@builder.io/qwik/qwikloader.js'

import { render } from '@builder.io/qwik'
+ import { CapacitorUpdater } from '@capgo/capacitor-updater'
import './index.css'
import { App } from './app.tsx'

// Call the CapacitorUpdater.notifyAppReady() before any other code
+ CapacitorUpdater.notifyAppReady();

render(document.getElementById('app') as HTMLElement, <App />)`,
    },
  },
  q3_qwik_city: {
    type: 'final',
    question: 'Place the <code>notifyAppReady()</code> call',
    text: 'For Qwik City, modify your <code>src/root.tsx</code> file to add the import and call:',
    warning: 'You <b>MUST</b> put <code>CapacitorUpdater.notifyAppReady();</code> before running any other code in <code>useVisibleTask$</code> or <code>root.tsx</code>',
    code: {
      default: `import { component$, useVisibleTask$ } from "@builder.io/qwik";
import { isDev } from "@builder.io/qwik";
+ import { CapacitorUpdater } from '@capgo/capacitor-updater'
import { QwikCityProvider, RouterOutlet } from "@builder.io/qwik-city";
import { RouterHead } from "./components/router-head/router-head";

import "./global.css";

export default component$(() => {
  /**
   * The root of a QwikCity site always start with the <QwikCityProvider> component,
   * immediately followed by the document's <head> and <body>.
   *
   * Don't remove the \`<head>\` and \`<body>\` elements.
   */

+  useVisibleTask$(() => {
+    CapacitorUpdater.notifyAppReady();
+   }, { strategy: "document-ready" });

  return (
    <QwikCityProvider>
      <head>
        <meta charset="utf-8" />
        {!isDev && (
          <link
            rel="manifest"
            href={\`\${import.meta.env.BASE_URL}manifest.json\`}
          />
        )}
        <RouterHead />
      </head>
      <body lang="en">
        <RouterOutlet />
      </body>
    </QwikCityProvider>
  );
});`,
    },
  },
  q3_script_type: {
    type: 'buttons',
    question: 'How does your &lt;script&gt; tag look?',
    answers: [
      {
        id: 'basic',
        text: '&lt;script src="app.{ext}"&gt;&lt;/script&gt;',
        next: 'q4_head_basic',
      },
      {
        id: 'defer',
        text: '&lt;script src="app.{ext}" defer&gt;&lt;/script&gt;',
        next: 'q4_head_defer',
      },
      {
        id: 'async',
        text: '&lt;script src="app.{ext}" async&gt;&lt;/script&gt;',
        next: 'q4_head_async',
      },
      {
        id: 'module',
        text: '&lt;script type="module" src="app.{ext}"&gt;&lt;/script&gt;',
        next: 'q4_head_module',
      },
    ],
  },
  q4_body_script: {
    type: 'final',
    question: 'Place the <code>notifyAppReady()</code> call',
    text: 'Place your code at main.{ext} file. The name of the file will change depending on the structure of your app.',
    warning: 'You <b>MUST</b> put this code before any DOM manipulation / DOM API calls',
    code: {
      js: `import { CapacitorUpdater } from '@capgo/capacitor-updater'

// Call this first!
CapacitorUpdater.notifyAppReady();

// Your app initialization code here`,
      ts: `import { CapacitorUpdater } from '@capgo/capacitor-updater'

// Call this first!
CapacitorUpdater.notifyAppReady();

// Your app initialization code here`,
    },
  },
  q4_head_basic: {
    type: 'final',
    question: 'Place the <code>notifyAppReady()</code> call',
    text: 'Since your script is in the head without defer/async, you need to wait for the DOM to load:',
    warning: 'You <b>MUST</b> put <code>CapacitorUpdater.notifyAppReady();</code> before running any other code',
    code: {
      default: `import { CapacitorUpdater } from '@capgo/capacitor-updater'

document.addEventListener('DOMContentLoaded', function() {
  // Call this first!
  CapacitorUpdater.notifyAppReady();
  
  // Your app initialization code here
});`,
    },
  },
  q4_head_defer: {
    type: 'final',
    question: 'Place the <code>notifyAppReady()</code> call',
    text: 'Since your script has <code>defer</code>, the DOM is already ready when your script runs:',
    warning: 'You <b>MUST</b> put <code>CapacitorUpdater.notifyAppReady();</code> before running any other code',
    code: {
      default: `import { CapacitorUpdater } from '@capgo/capacitor-updater'

// Call this first!
CapacitorUpdater.notifyAppReady();

// Your app initialization code here`,
    },
  },
  q4_head_async: {
    type: 'final',
    question: 'Place the <code>notifyAppReady()</code> call',
    text: 'Since your script is <code>async</code>, you need to check if the DOM is ready:',
    warning: 'You <b>MUST</b> put <code>CapacitorUpdater.notifyAppReady();</code> before running any other code',
    code: {
      default: `import { CapacitorUpdater } from '@capgo/capacitor-updater'

// Call this first!
CapacitorUpdater.notifyAppReady();

// Your app initialization code here`,
    },
  },
  q4_head_module: {
    type: 'final',
    question: 'Place the <code>notifyAppReady()</code> call',
    text: 'Since your script is a module, it behaves like <code>defer</code> - the DOM is ready when your script runs:',
    warning: 'You <b>MUST</b> put <code>CapacitorUpdater.notifyAppReady();</code> before running any other code',
    code: {
      default: `import { CapacitorUpdater } from '@capgo/capacitor-updater'

// Call this first!
CapacitorUpdater.notifyAppReady();

// Your app initialization code here`,
    },
  },
  q4_other_frameworks: {
    type: 'final',
    question: 'Place the <code>notifyAppReady()</code> call',
    text: "For your framework, place <code>CapacitorUpdater.notifyAppReady()</code> after your main app initialization, typically in your root component's lifecycle hook.",
    code: {
      react: `import { useEffect } from 'react';
import { CapacitorUpdater } from '@capgo/capacitor-updater';

function App() {
  useEffect(() => {
    // Call this first!
    CapacitorUpdater.notifyAppReady();
    
    // Your app initialization logic
  }, []);
  return (/* ... */);
}`,
      angular: `import { Component, OnInit } from '@angular/core';
import { CapacitorUpdater } from '@capgo/capacitor-updater';

@Component({ /* ... */ })
export class AppComponent implements OnInit {
  ngOnInit() {
    // Call this first!
    CapacitorUpdater.notifyAppReady();
    
    // Your app initialization logic
  }
}`,
      vue: `import { onMounted } from 'vue';
import { CapacitorUpdater } from '@capgo/capacitor-updater';

export default {
  setup() {
    onMounted(() => {
      // Call this first!
      CapacitorUpdater.notifyAppReady();
      
      // Your app initialization logic
    });
  }
}`,
      svelte: `import { onMount } from 'svelte';
import { CapacitorUpdater } from '@capgo/capacitor-updater';

onMount(() => {
  // Call this first!
  CapacitorUpdater.notifyAppReady();
  
  // Your app initialization logic
});`,
      qwik: `import { component$, useOnDocument } from '@builder.io/qwik';
import { CapacitorUpdater } from '@capgo/capacitor-updater';

export default component$(() => {
  useOnDocument('qwik:ready', () => {
    // Call this first!
    CapacitorUpdater.notifyAppReady();
    
    // Your app initialization logic
  });
  return (/* ... */);
});`,
    },
  },
}
---

<!-- Custom Steps Component -->
<div class="sl-steps" id="questionnaire-steps">
  <ol>
    <li id="step-1">
      <strong>{questionFlow.q1.question}</strong>
      <FrameworkSelector />
    </li>

    <li id="step-2" style="display: none;">
      <strong id="step-2-question"></strong>
      <div id="step-2-buttons" class="question-buttons"></div>
    </li>

    <li id="step-3" style="display: none;">
      <strong id="step-3-question"></strong>
      <div id="step-3-buttons" class="question-buttons"></div>
      <div id="step-3-content"></div>
    </li>

    <li id="step-4" style="display: none;">
      <strong id="step-4-question"></strong>
      <div id="step-4-content"></div>
    </li>
  </ol>
</div>

<style is:global>
  /* Custom Steps Styling (copied from Starlight) */
  .sl-steps {
    --bullet-size: calc(var(--sl-line-height) * 1rem);
    --bullet-margin: 0.375rem;

    list-style: none;
    counter-reset: steps-counter var(--sl-steps-start, 0);
    padding-inline-start: 0;
  }

  .sl-steps > ol {
    list-style: none;
    padding-inline-start: 0;
    margin: 0;
  }

  .sl-steps > ol > li {
    counter-increment: steps-counter;
    position: relative;
    padding-inline-start: calc(var(--bullet-size) + 1rem);
    padding-bottom: 1px;
    min-height: calc(var(--bullet-size) + var(--bullet-margin));
  }

  .sl-steps > ol > li + li {
    margin-top: 0;
  }

  /* Custom list marker element */
  .sl-steps > ol > li::before {
    content: counter(steps-counter);
    position: absolute;
    top: 0;
    inset-inline-start: 0;
    width: var(--bullet-size);
    height: var(--bullet-size);
    line-height: var(--bullet-size);

    font-size: var(--sl-text-xs);
    font-weight: 600;
    text-align: center;
    color: var(--sl-color-white);
    background-color: var(--sl-color-gray-6);
    border-radius: 99rem;
    box-shadow: inset 0 0 0 1px var(--sl-color-gray-5);
  }

  /* Vertical guideline linking list numbers */
  .sl-steps > ol > li::after {
    --guide-width: 1px;
    content: '';
    position: absolute;
    top: calc(var(--bullet-size) + var(--bullet-margin));
    bottom: var(--bullet-margin);
    inset-inline-start: calc((var(--bullet-size) - var(--guide-width)) / 2);
    width: var(--guide-width);
    background-color: var(--sl-color-hairline-light);
  }

  /* Adjust first item inside a step */
  .sl-steps > ol > li > :first-child {
    --lh: calc(1em * var(--sl-line-height));
    --shift-y: calc(0.5 * (var(--bullet-size) - var(--lh)));
    transform: translateY(var(--shift-y));
    margin-bottom: var(--shift-y);
  }

  /* Question buttons styling */
  .question-buttons {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    margin-top: 1rem;
  }

  .question-btn {
    background: var(--sl-color-gray-6);
    color: var(--sl-color-gray-1);
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 0.375rem;
    padding: 0.75rem 1rem;
    cursor: pointer;
    transition: all 0.2s ease;
    font-family: var(--sl-font);
    font-size: var(--sl-text-sm);
    margin: 0;
  }

  .question-btn:hover {
    border-color: var(--sl-color-blue);
    background-color: var(--sl-color-gray-5);
  }

  .question-btn.selected {
    border-color: var(--sl-color-blue);
    background-color: var(--sl-color-blue);
    color: white;
  }

  .script-type-buttons {
    flex-direction: column;
    align-items: flex-start;
  }

  .script-type-buttons .question-btn {
    font-family: monospace;
  }

  /* React framework buttons styling */
  .react-framework-buttons {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: stretch;
    gap: 10px;
    margin-top: 1rem;
  }

  .react-framework-buttons .framework-button {
    flex: 0 0 calc(25% - 7.5px);
    max-width: 200px;
    min-height: 120px;
    padding: 1rem;
    border: 2px solid var(--sl-color-gray-5);
    border-radius: 8px;
    background-color: var(--sl-color-black);
    color: var(--sl-color-white);
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    margin: 0;
  }

  .react-framework-buttons .framework-icon {
    width: 48px;
    height: 48px;
    margin-bottom: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .react-framework-buttons .framework-icon img {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .react-framework-buttons .framework-name {
    font-size: 0.875rem;
    font-weight: 500;
    line-height: 1.2;
  }

  .react-framework-buttons .framework-button:hover {
    border-color: var(--sl-color-blue);
    background-color: var(--sl-color-gray-6);
  }

  .react-framework-buttons .framework-button.selected {
    border-color: var(--sl-color-blue);
    background-color: var(--sl-color-blue);
    color: white;
  }

  /* Warning styling */
  .questionnaire-warning {
    margin-top: 1rem;
  }

  /* Code block styling */
  .questionnaire-code {
    margin-top: 1rem;
  }

  .questionnaire-code pre {
    background: var(--sl-color-gray-6);
    border-radius: 0.375rem;
    padding: 1rem;
    overflow-x: auto;
  }

  .questionnaire-code code {
    font-family: var(--sl-font-mono);
    font-size: var(--sl-text-sm);
    color: var(--sl-color-gray-1);
    white-space: pre-wrap;
    line-height: 1.1;
    display: block;
  }

  .questionnaire-code .diff-line {
    padding: 0 0.5rem;
    margin: 0;
    line-height: 1.1;
    min-height: 1.1em;
  }

  .questionnaire-code .diff-added {
    background-color: rgba(34, 197, 94, 0.2);
    color: #22c55e;
    border-left: 3px solid #22c55e;
    padding: 0 calc(0.5rem - 3px);
    line-height: 1.1;
    min-height: 1.1em;
  }

  .questionnaire-code .diff-removed {
    background-color: rgba(239, 68, 68, 0.2);
    color: #ef4444;
    border-left: 3px solid #ef4444;
    padding: 0 calc(0.5rem - 3px);
    line-height: 1.1;
    min-height: 1.1em;
  }
</style>

<script define:vars={{ questionFlow }}>
  document.addEventListener('DOMContentLoaded', function () {
    let currentFramework = ''

    // Get step elements
    const step2 = document.getElementById('step-2')
    const step3 = document.getElementById('step-3')
    const step4 = document.getElementById('step-4')

    // Listen for framework selection
    document.addEventListener('frameworkSelected', function (event) {
      const customEvent = event
      currentFramework = customEvent.detail.framework

      // Reset the entire questionnaire when framework changes
      resetQuestionnaire()

      const nextStep = questionFlow.q1.next[currentFramework]
      showStep(nextStep, 2)
    })

    function showStep(stepId, stepNumber) {
      console.log('showStep called with:', stepId, stepNumber)
      const step = questionFlow[stepId]
      if (!step) {
        console.log('Step not found in questionFlow:', stepId)
        return
      }
      console.log('Found step:', step)

      const stepElement = document.getElementById(`step-${stepNumber}`)
      const questionElement = document.getElementById(`step-${stepNumber}-question`)
      const buttonsElement = document.getElementById(`step-${stepNumber}-buttons`)
      const contentElement = document.getElementById(`step-${stepNumber}-content`)

      console.log('Step elements:', { stepElement, questionElement, buttonsElement, contentElement })

      if (stepElement) stepElement.style.display = 'list-item'
      if (questionElement) questionElement.innerHTML = step.question

      if (step.type === 'buttons') {
        // Create buttons for this step
        if (buttonsElement) {
          buttonsElement.innerHTML = ''
          buttonsElement.className = stepId === 'q3_script_type' ? 'question-buttons script-type-buttons' : 'question-buttons'

          step.answers.forEach(function (answer) {
            const button = document.createElement('button')
            button.className = 'question-btn'
            // Replace {ext} placeholder with correct file extension
            let buttonText = answer.text
            if (buttonText.includes('{ext}')) {
              const extension = currentFramework === 'ts' ? 'ts' : 'js'
              buttonText = buttonText.replace('{ext}', extension)
            }
            button.innerHTML = buttonText
            button.setAttribute('data-answer', answer.id)
            button.setAttribute('data-next', answer.next)

            button.addEventListener('click', function () {
              // Remove selected class from all buttons in this step
              buttonsElement.querySelectorAll('.question-btn').forEach(function (btn) {
                btn.classList.remove('selected')
              })

              // Add selected class to clicked button
              button.classList.add('selected')

              // Hide subsequent steps
              hideStepsAfter(stepNumber)

              // Show next step
              const nextStepId = button.getAttribute('data-next')
              const nextStepNumber = getStepNumberForId(nextStepId)
              if (nextStepNumber <= 4) {
                showStep(nextStepId, nextStepNumber)
              }
            })

            buttonsElement.appendChild(button)
          })
        }
      } else if (step.type === 'framework_buttons') {
        // Create framework buttons similar to FrameworkSelector
        if (buttonsElement) {
          buttonsElement.innerHTML = ''
          buttonsElement.className = 'question-buttons react-framework-buttons'

          step.frameworks.forEach(function (framework) {
            const button = document.createElement('button')
            button.className = 'framework-button'
            button.setAttribute('data-framework', framework.id)
            const nextStepId = typeof step.next === 'object' ? step.next[framework.id] : step.next
            button.setAttribute('data-next', nextStepId)
            button.setAttribute('aria-label', `Select ${framework.name}`)
            console.log('Setting up button for', framework.id, 'with next step:', nextStepId)

            // Create icon div
            const iconDiv = document.createElement('div')
            iconDiv.className = 'framework-icon'
            const iconImg = document.createElement('img')
            iconImg.src = framework.icon
            iconImg.alt = framework.name
            iconDiv.appendChild(iconImg)

            // Create name div
            const nameDiv = document.createElement('div')
            nameDiv.className = 'framework-name'
            nameDiv.textContent = framework.name

            button.appendChild(iconDiv)
            button.appendChild(nameDiv)

            button.addEventListener('click', function () {
              // Remove selected class from all buttons
              buttonsElement.querySelectorAll('.framework-button').forEach(function (btn) {
                btn.classList.remove('selected')
              })

              // Add selected class to clicked button
              button.classList.add('selected')

              // Hide subsequent steps
              hideStepsAfter(stepNumber)

              // Show next step
              const nextStepId = button.getAttribute('data-next')
              console.log('Clicked framework button:', button.getAttribute('data-framework'), 'next step:', nextStepId)
              const nextStepNumber = getStepNumberForId(nextStepId)
              if (nextStepNumber <= 4) {
                showStep(nextStepId, nextStepNumber)
              }
            })

            buttonsElement.appendChild(button)
          })
        }
      } else if (step.type === 'final') {
        // Show final step content
        if (contentElement) {
          let content = ''

          if (step.text) {
            // Replace {ext} placeholder with correct file extension
            let stepText = step.text
            if (stepText.includes('{ext}')) {
              const extension = currentFramework === 'ts' ? 'ts' : 'js'
              stepText = stepText.replace('{ext}', extension)
            }
            content += `<p>${stepText}</p>`
          }

          if (step.warning) {
            content += `<div class="sl-markdown-content questionnaire-warning"><aside aria-label="Caution" class="starlight-aside starlight-aside--caution"><p class="starlight-aside__title" aria-hidden="true">Caution</p><section class="starlight-aside__content">${step.warning}</section></aside></div>`
          }

          if (step.code) {
            content += '<div class="questionnaire-code">'

            if (step.code[currentFramework]) {
              content += `<pre data-language="js"><code>${formatDiffCode(step.code[currentFramework])}</code></pre>`
            } else if (step.code.js && currentFramework === 'js') {
              content += `<pre data-language="js"><code>${formatDiffCode(step.code.js)}</code></pre>`
            } else if (step.code.ts && currentFramework === 'ts') {
              content += `<pre data-language="js"><code>${formatDiffCode(step.code.ts)}</code></pre>`
            } else if (step.code.default) {
              content += `<pre data-language="js"><code>${formatDiffCode(step.code.default)}</code></pre>`
            }

            content += '</div>'
          }

          contentElement.innerHTML = content
        }
      }
    }

    function getStepNumberForId(stepId) {
      // Map step IDs to step numbers
      if (
        stepId === 'q2_js_ts' ||
        stepId === 'q2_react_framework' ||
        stepId === 'q2_angular_framework' ||
        stepId === 'q2_vue_framework' ||
        stepId === 'q2_svelte_framework' ||
        stepId === 'q2_qwik_framework'
      )
        return 2
      if (
        stepId === 'q3_script_type' ||
        stepId === 'q3_react_final' ||
        stepId === 'q3_ionic_react' ||
        stepId === 'q3_nextjs_final' ||
        stepId === 'q3_vite_react' ||
        stepId === 'q3_react_router' ||
        stepId === 'q3_cra_react' ||
        stepId === 'q3_ionic_angular' ||
        stepId === 'q3_vite_angular' ||
        stepId === 'q3_ng_cli' ||
        stepId === 'q3_ionic_vue' ||
        stepId === 'q3_vite_vue' ||
        stepId === 'q3_nuxt' ||
        stepId === 'q3_vite_svelte' ||
        stepId === 'q3_sveltekit' ||
        stepId === 'q3_vite_qwik' ||
        stepId === 'q3_qwik_city'
      )
        return 3
      if (stepId.startsWith('q4_')) return 4
      return 4 // Default to step 4 for final steps
    }

    function hideStepsAfter(stepNumber) {
      for (let i = stepNumber + 1; i <= 4; i++) {
        const stepElement = document.getElementById(`step-${i}`)
        if (stepElement) stepElement.style.display = 'none'
      }
    }

    function resetQuestionnaire() {
      // Hide all steps except step 1
      for (let i = 2; i <= 4; i++) {
        const stepElement = document.getElementById(`step-${i}`)
        if (stepElement) stepElement.style.display = 'none'
      }

      // Clear all button containers
      const step2Buttons = document.getElementById('step-2-buttons')
      const step3Buttons = document.getElementById('step-3-buttons')
      const step4Content = document.getElementById('step-4-content')

      if (step2Buttons) step2Buttons.innerHTML = ''
      if (step3Buttons) step3Buttons.innerHTML = ''
      if (step4Content) step4Content.innerHTML = ''

      // Clear question text
      const step2Question = document.getElementById('step-2-question')
      const step3Question = document.getElementById('step-3-question')
      const step4Question = document.getElementById('step-4-question')

      if (step2Question) step2Question.textContent = ''
      if (step3Question) step3Question.textContent = ''
      if (step4Question) step4Question.textContent = ''
    }

    function escapeHtml(text) {
      const div = document.createElement('div')
      div.textContent = text
      return div.innerHTML
    }

    function formatDiffCode(code) {
      const lines = code.split('\n')
      return lines
        .map((line) => {
          const escapedLine = escapeHtml(line)
          if (line.startsWith('+ ')) {
            return `<div class="diff-line diff-added">${escapedLine}</div>`
          } else if (line.startsWith('- ')) {
            return `<div class="diff-line diff-removed">${escapedLine}</div>`
          } else {
            return `<div class="diff-line">${escapedLine}</div>`
          }
        })
        .join('')
    }
  })
</script>
