---
import Layout from '@/layouts/Layout.astro'
import * as m from '@/paraglide/messages'
import 'toastify-js/src/toastify.css'

const captchaKey = import.meta.env.CLOUDFLARE_TURNSTILE_SITE_KEY
const CLOUDFLARE_TURNSTILE_SITE_KEY = captchaKey
const enableCaptcha = !!CLOUDFLARE_TURNSTILE_SITE_KEY
---

{enableCaptcha && <script is:inline src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer />}

<Layout>
  <section class="flex min-h-screen items-center justify-center overflow-hidden bg-slate-900 p-4">
    <div class="relative w-full max-w-4xl">
      <div class="absolute inset-0 -translate-x-4 transform">
        <svg class="blur-3xl filter" style="filter: blur(64px)" width="100%" height="100%" viewBox="0 0 444 775" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            opacity="0.5"
            d="M48.1169 329.705C48.1169 139.089 -73.495 -1.98068e-05 69.9555 -7.266e-06C213.406 5.27484e-06 444 499.666 444 690.282C444 880.898 213.406 690.282 69.9554 690.282C-73.4951 690.282 48.1168 520.321 48.1169 329.705Z"
            fill="url(#elin)"></path>
          <defs>
            <linearGradient id="elin" x1="444" y1="775" x2="-60.7966" y2="733.139" gradientUnits="userSpaceOnUse">
              <stop offset="0%" style="stop-color: var(--color-cyan-500)"></stop>
              <stop offset="100%" style="stop-color: var(--color-purple-500)"></stop>
            </linearGradient>
          </defs>
        </svg>
      </div>
      <div class="relative z-10 grid overflow-hidden rounded-lg bg-white shadow-xl md:grid-cols-2">
        <div class="space-y-6 p-6">
          <div>
            <h2 class="text-4xl font-bold text-gray-900">{m.register_title({}, { locale: Astro.locals.locale })}</h2>
            <p class="text-sm text-gray-500">
              {m.already_have_account({}, { locale: Astro.locals.locale })}
              <a href="https://web.capgo.app/login/" target="_blank" class="text-blue-500 hover:underline">{m.sign_in({}, { locale: Astro.locals.locale })}</a>
            </p>
          </div>
          <form id="registerForm" class="space-y-4 text-black">
            <div>
              <label for="email" class="block text-sm font-medium text-gray-700">{m.email_label({}, { locale: Astro.locals.locale })}</label>
              <input
                id="email"
                name="email"
                type="email"
                required
                class="mt-1 block w-full rounded-md border border-gray-300 bg-white px-3 py-2 shadow-sm focus:border-blue-500 focus:ring-blue-500 focus:outline-none"
                placeholder={m.email_placeholder({}, { locale: Astro.locals.locale })}
              />
            </div>
            <div class="grid grid-cols-2 gap-4">
              <div>
                <label for="firstName" class="block text-sm font-medium text-gray-700">{m.first_name_label({}, { locale: Astro.locals.locale })}</label>
                <input
                  id="firstName"
                  name="firstName"
                  type="text"
                  required
                  class="mt-1 block w-full rounded-md border border-gray-300 bg-white px-3 py-2 shadow-sm focus:border-blue-500 focus:ring-blue-500 focus:outline-none"
                  placeholder={m.first_name_placeholder({}, { locale: Astro.locals.locale })}
                />
              </div>
              <div>
                <label for="lastName" class="block text-sm font-medium text-gray-700">{m.last_name_label({}, { locale: Astro.locals.locale })}</label>
                <input
                  id="lastName"
                  name="lastName"
                  type="text"
                  required
                  class="mt-1 block w-full rounded-md border border-gray-300 bg-white px-3 py-2 shadow-sm focus:border-blue-500 focus:ring-blue-500 focus:outline-none"
                  placeholder={m.last_name_placeholder({}, { locale: Astro.locals.locale })}
                />
              </div>
            </div>
            <div>
              <label for="password" class="block text-sm font-medium text-gray-700">{m.password_label({}, { locale: Astro.locals.locale })}</label>
              <input
                id="password"
                name="password"
                type="password"
                required
                class="mt-1 block w-full rounded-md border border-gray-300 bg-white px-3 py-2 shadow-sm focus:border-blue-500 focus:ring-blue-500 focus:outline-none"
                placeholder={m.password_placeholder({}, { locale: Astro.locals.locale })}
              />
            </div>
            {
              enableCaptcha && (
                <div>
                  <label class="block text-sm font-medium text-gray-700">Captcha</label>
                  <div class="cf-turnstile" data-sitekey={CLOUDFLARE_TURNSTILE_SITE_KEY} data-size="flexible" />
                </div>
              )
            }
            <button
              type="submit"
              class="flex w-full justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-none"
            >
              {m.sign_up_button({}, { locale: Astro.locals.locale })}
            </button>
          </form>
          <div class="relative">
            <div class="absolute inset-0 flex items-center">
              <div class="w-full border-t border-gray-300"></div>
            </div>
            <div class="relative flex justify-center text-sm">
              <span class="bg-white px-2 text-gray-500">{m.need_help({}, { locale: Astro.locals.locale })}</span>
            </div>
          </div>
          <a
            href="mailto:support@capgo.app"
            class="flex w-full items-center justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-none"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M18 18.72a9.094 9.094 0 003.741-.479 3 3 0 00-4.682-2.72m.94 3.198l.001.031c0 .225-.012.447-.037.666A11.944 11.944 0 0112 21c-2.17 0-4.207-.576-5.963-1.584A6.062 6.062 0 016 18.719m12 0a5.971 5.971 0 00-.941-3.197m0 0A5.995 5.995 0 0012 12.75a5.995 5.995 0 00-5.058 2.772m0 0a3 3 0 00-4.681 2.72 8.986 8.986 0 003.74.477m.94-3.197a5.971 5.971 0 00-.94 3.197M15 6.75a3 3 0 11-6 0 3 3 0 016 0zm6 3a2.25 2.25 0 11-4.5 0 2.25 2.25 0 014.5 0zm-13.5 0a2.25 2.25 0 11-4.5 0 2.25 2.25 0 014.5 0z"
              ></path>
            </svg>
            {m.open_support({}, { locale: Astro.locals.locale })}
          </a>
        </div>
        <div class="flex items-center bg-slate-800 p-4">
          <blockquote class="text-white">
            <p class="mb-4 text-2xl font-bold">
              {m.testimonial_title({}, { locale: Astro.locals.locale })}<br />
              After update,
              <span class="rounded-full bg-orange-500 px-2 py-1 text-white">{m.testimonial_highlight({}, { locale: Astro.locals.locale })}</span>
            </p>
            <div class="mb-4 flex items-center">
              <img src="/avatar-male-2.webp" alt="User" class="mr-4 h-12 w-12 rounded-full" />
              <div>
                <cite class="font-bold text-white">Jermaine</cite>
                <p class="text-gray-400">{m.testimonial_description({}, { locale: Astro.locals.locale })}</p>
              </div>
            </div>
          </blockquote>
        </div>
      </div>
    </div>
    <div class="pointer-events-none absolute inset-0 overflow-hidden">
      <img class="h-full w-full transform object-cover object-top opacity-20" src="/background-pattern.webp" alt="" />
    </div>
  </section>
</Layout>

<script>
  import { getRemoteConfig, useSupabase } from '@/services/supabase'
  import Toastify from 'toastify-js'

  const form = document.getElementById('registerForm')
  const email = document.getElementById('email') as HTMLInputElement
  const firstName = document.getElementById('firstName') as HTMLInputElement
  const lastName = document.getElementById('lastName') as HTMLInputElement
  const password = document.getElementById('password') as HTMLInputElement
  const submitButton = form?.querySelector('button[type="submit"]') as HTMLButtonElement

  function getCaptchaId() {
    if (!(window as any).turnstile) {
      return undefined
    }
    return (window as any).turnstile.getResponse() as string
  }

  getRemoteConfig()

  form?.addEventListener('submit', async (e) => {
    e.preventDefault()
    if (submitButton.disabled) return
    const supabase = useSupabase()
    const { data: deleted, error: errorDeleted } = await supabase.rpc('is_not_deleted', { email_check: email.value })
    if (errorDeleted) console.error(errorDeleted)
    if (!deleted) {
      return Toastify({
        text: 'Account is in error, please contact support at support@capgo.app',
        style: {
          background: '#e7000b',
        },
      }).showToast()
    }
    submitButton.disabled = true
    const { data: user, error } = await supabase.auth.signUp({
      email: email.value,
      password: password.value,
      options: {
        captchaToken: getCaptchaId(),
        data: {
          first_name: firstName.value,
          last_name: lastName.value,
          activation: {
            formFilled: true,
            enableNotifications: false,
            legal: false,
            optForNewsletters: false,
          },
        },
        emailRedirectTo: 'https://web.capgo.app/onboarding/verify_email',
      },
    })
    if (error) {
      submitButton.disabled = false
      console.error('Supabase signup error', error)
      return Toastify({
        text: error.message,
        style: {
          background: '#e7000b',
        },
      }).showToast()
    }
    if (error || !user) {
      submitButton.disabled = false
      return
    }
    const session = await supabase.auth.getSession()
    if (session.error) {
      submitButton.disabled = false
      console.error('Supabase session error', session.error)
      return Toastify({
        text: session.error.message,
        style: {
          background: '#e7000b',
        },
      }).showToast()
    }
    if ((window as any).datafast) {
      ;(window as any).datafast('signup', { email: email.value })
    }
    window.location.href = `https://web.capgo.app/login/?access_token=${session.data.session?.access_token}&refresh_token=${session.data.session?.refresh_token}`
  })
</script>
