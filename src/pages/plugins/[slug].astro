---
import type { Plugin } from '@/config/plugins'
import { actions } from '@/config/plugins'
import Layout from '@/layouts/Layout.astro'
import { createSoftwareApplicationLdJson, validateLdJson } from '@/lib/ldJson'
import * as m from '@/paraglide/messages'
import { getSlug } from '@/services/github'
import { defaultLocale } from '@/services/locale'
import type { GetStaticPaths } from 'astro'
import type { CollectionEntry } from 'astro:content'
import { getCollection } from 'astro:content'
import { getRelativeLocaleUrl } from 'astro:i18n'
import { marked } from 'marked'

export const getStaticPaths: GetStaticPaths = async () => {
  const pluginPosts: { [k: string]: CollectionEntry<'plugin'>[] } = {}
  await getCollection('plugin', (item) => {
    const { data, filePath } = item
    if (data.published !== false && filePath) {
      const pluginSlug = getSlug(filePath).replace('.md', '')
      if (!pluginPosts[pluginSlug]) pluginPosts[pluginSlug] = []
      pluginPosts[pluginSlug].push(item)
    }
  })
  return Object.entries(pluginPosts).map(([slug, posts]) => {
    return {
      params: { slug },
      props: { posts },
    }
  })
}

// Get the plugin from the actions set
const plugin = actions.find((item) => getSlug(item.href) === Astro.params.slug) as Plugin

if (!plugin || !plugin.title) return new Response(`plugin is not found for: ${Astro.url.pathname}`, { status: 404 })

let tutorialPlugin = ''
const thisTut = (Astro.props.posts as CollectionEntry<'plugin'>[]).find((i) => (i.data.locale || defaultLocale) === Astro.locals.locale)
if (thisTut?.body) tutorialPlugin = thisTut.body

if (tutorialPlugin.length > 0) {
  const tmp = marked.parse(tutorialPlugin)
  if (typeof tmp !== 'string') plugin['tutorial'] = await tmp
  else plugin['tutorial'] = tmp
}

plugin['githubStars'] = 0
plugin['npmDownloads'] = 0

const tmp = marked.parse(`# ${plugin.title}\n\n${plugin.description}`)
if (typeof tmp !== 'string') plugin['readme'] = await tmp
else plugin['readme'] = tmp

// const promises: any[] = []

// Fetch npm package details to get npm downloads
// const npmApiUrl = `https://api.npmjs.org/downloads/point/last-month/${plugin.name}`
// promises.push(
//   fetch(npmApiUrl)
//     .then((res) => (res.ok ? res.json() : null))
//     .then((res) => {
//       if (res) plugin.npmDownloads = res.downloads
//     })
//     .catch(() => {}),
// )

// Fetch npm package details to get npm modified
// const registryNpmApiUrl = `https://registry.npmjs.org/${plugin.name}`
// promises.push(
//   fetch(registryNpmApiUrl)
//     .then((res) => (res.ok ? res.json() : null))
//     .then((res) => {
//       if (res) {
//         plugin.datePublished = res.time.created
//         plugin.dateModified = res.time.modified
//       }
//     })
//     .catch(() => {}),
// )

// Extract the GitHub repository owner and name from the URL
// const githubUrlParts = plugin.href.split('/')
// const githubOwner = githubUrlParts[3]
// const githubRepo = githubUrlParts[4]

// Fetch GitHub repository details to get GitHub stars
// const githubApiUrl = `https://api.github.com/repos/${githubOwner}/${githubRepo}`
// promises.push(
//   fetch(githubApiUrl)
//     .then((res) => (res.ok ? res.json() : null))
//     .then((res) => {
//       if (res) plugin.githubStars = res.stargazers_count
//     })
//     .catch(() => {}),
// )

// Update the item with fetched data
// const readmeApiUrl = `https://api.github.com/repos/${githubOwner}/${githubRepo}/readme`
// promises.push(
//   fetchWithToken(readmeApiUrl)
//     .then((res) => (res.ok ? res.json() : null))
//     .then((res) => {
//       if (res) {
//         const tmp = marked.parse(Buffer.from(res.content, 'base64').toString('utf-8'))
//         if (typeof tmp !== 'string') tmp.then((result) => (plugin.readme = result))
//         else plugin.readme = tmp
//       }
//     })
//     .catch(() => {}),
// )

// Await all the items to be fetched
// await Promise.all(promises)

const { slug: id } = Astro.params

const content: { title?: string; description?: string; image?: string; author?: string; ldJSON?: Object } = {}

if (plugin.title) content['title'] = plugin.title
if (plugin.description) content['description'] = plugin.description

// Create improved ldJSON using helper function for SoftwareApplication
const pluginUrl = getRelativeLocaleUrl(Astro.locals.locale, `/plugins/${id}`)

content['ldJSON'] = createSoftwareApplicationLdJson(Astro.locals.runtimeConfig.public, {
  name: plugin.title,
  description: plugin.description,
  url: pluginUrl,
  applicationCategory: 'DeveloperApplication',
  operatingSystem: 'iOS, Android',
  softwareVersion: '1.0.0', // Default version as plugin doesn't have version property
  downloadUrl: plugin.href,
  aggregateRating: plugin.githubStars
    ? {
        ratingValue: Math.min(plugin.githubStars / 100, 5), // Normalize stars to 5-star scale
        reviewCount: plugin.githubStars,
      }
    : undefined,
})

// Validate ldJSON in development
if (import.meta.env.DEV) {
  const validation = validateLdJson(content['ldJSON'])
  if (!validation.isValid) {
    console.warn('Plugin ldJSON validation errors:', validation.errors)
  }
}

const { title, description, githubStars, npmDownloads, href, name, readme, tutorial } = plugin
---

<Layout {content}>
  <div class="flex w-full flex-col items-center">
    <div class="flex w-full flex-row flex-wrap px-10 lg:max-w-6xl xl:px-0">
      <a aria-label="Back To Plugins" href={getRelativeLocaleUrl(Astro.locals.locale, 'plugins')} class="max-w-max border-b border-white/10 pb-0.5 text-white/50 hover:text-white">
        ‚Üê Back To Plugins
      </a>
    </div>
    <div class="mt-6 flex w-full flex-row flex-wrap gap-8 px-10 lg:max-w-6xl xl:px-0">
      <button class="rounded border border-white px-3 py-1 text-sm" id="tutorialBtn">
        {m.tutorial_on({}, { locale: Astro.locals.locale })}
        {title}
      </button>
      <!-- <button class="rounded border border-white/10 px-3 py-1 text-sm" id="aboutBtn">
        {m.about({}, { locale: Astro.locals.locale })}
        {title}
      </button> -->
    </div>
    <div class="mt-6 flex w-full flex-col items-center">
      <div class="z-10 mb-8 hidden w-full flex-row flex-wrap gap-10 px-10 md:flex-nowrap lg:max-w-6xl xl:px-0" id="aboutSection">
        <div class="flex w-full flex-col">
          <h1 class="mt-4 text-2xl font-bold md:text-4xl">
            {title}
          </h1>
          <span class="mt-8 text-lg font-light md:text-xl">
            {description}
          </span>
          {
            githubStars && (
              <div class="mt-8 flex flex-row items-center justify-between border-t border-white/10 pt-2">
                <span class="text-sm font-semibold text-gray-400">GitHub Stars</span>{' '}
                <a class="text-gray-600 hover:underline" href={href} target="_blank" rel="noopener noreferrer">
                  {githubStars}
                </a>
              </div>
            )
          }
          {
            npmDownloads && (
              <div class="mt-4 flex flex-row items-center justify-between border-t border-white/10 pt-2">
                <span class="text-sm font-semibold text-gray-400">NPM Downloads</span> <span class="text-gray-600">{npmDownloads}</span>
              </div>
            )
          }
          <div class="flex flex-row flex-wrap items-center justify-between">
            {
              href && (
                <a
                  aria-label="View Repo URL"
                  class="mt-8 w-full rounded border border-white/50 px-6 py-2 text-center text-sm hover:border-white sm:w-auto"
                  href={href}
                  target="_blank"
                >
                  {m.view_repo({}, { locale: Astro.locals.locale })} &rarr;
                </a>
              )
            }
            {
              name && (
                <a
                  aria-label="View NPM"
                  class="mt-8 w-full rounded border border-white/50 px-6 py-2 text-center text-sm hover:border-white sm:w-auto"
                  href={`https://www.npmjs.com/package/${name}`}
                  target="_blank"
                >
                  {m.view_npm({}, { locale: Astro.locals.locale })} &rarr;
                </a>
              )
            }
          </div>
          <!-- {readme && <div id="readme" class="prose my-8" set:html={readme} />} -->
        </div>
      </div>
    </div>
    {tutorial && <div class="prose prose-invert mx-auto w-full px-10 py-8 lg:max-w-6xl xl:px-0" id="tutorialSection" set:html={tutorial} />}
  </div>
</Layout>

<!-- <script>
  document.addEventListener('DOMContentLoaded', () => {
    const aboutBtn = document.getElementById('aboutBtn')
    const tutorialBtn = document.getElementById('tutorialBtn')
    const aboutSection = document.getElementById('aboutSection')
    const tutorialSection = document.getElementById('tutorialSection')
    const toggleSections = () => {
      aboutSection?.classList.toggle('hidden')
      tutorialSection?.classList.toggle('hidden')
    }
    aboutBtn?.addEventListener('click', toggleSections)
    tutorialBtn?.addEventListener('click', toggleSections)
  })
</script> -->
