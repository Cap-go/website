---
import type { Plugin } from '@/config/plugins'
import { actions } from '@/config/plugins'
import Layout from '@/layouts/Layout.astro'
import { defaultLocale } from '@/services/locale'
import { fetchWithToken, getSlug } from '@/services/github'
import VuePluginPDP from '@/vue-pages/plugins/[id].vue'
import type { GetStaticPaths } from 'astro'
import { getCollection } from 'astro:content'
import { marked } from 'marked'

export const getStaticPaths: GetStaticPaths = async () => {
  const slugsSet = new Set()
  const tuts = await getCollection('plugin')
  tuts.forEach((i) => {
    if (i.filePath && i.data.published !== false) slugsSet.add(getSlug(i.filePath).replace('.md', ''))
  })
  const slugs = [...slugsSet] as string[]
  return slugs.map((slug) => {
    return {
      params: { slug },
    }
  })
}

// Get the plugin from the actions set
const plugin = actions.find((item) => getSlug(item.href) === Astro.params.slug) as Plugin

if (!plugin || !plugin.title) {
  console.log(`plugin is not found for: ${Astro.url.pathname}`)
  return new Response(null, { status: 404 })
}

let tutorial = ''
const tuts = await getCollection('plugin')
const thisTut = tuts.find((i) => getSlug(i.filePath || '').replace('.md', '') === Astro.params.slug && (i.data.locale || defaultLocale) === Astro.locals.locale)
if (thisTut?.body) tutorial = thisTut.body

if (tutorial.length > 0) {
  const tmp = marked.parse(tutorial)
  if (typeof tmp !== 'string') plugin['tutorial'] = await tmp
  else plugin['tutorial'] = tmp
}

plugin['githubStars'] = 0
plugin['npmDownloads'] = 0

const tmp = marked.parse(`# ${plugin.title}\n\n${plugin.description}`)
if (typeof tmp !== 'string') plugin['readme'] = await tmp
else plugin['readme'] = tmp

const promises: any[] = []
// Fetch npm package details to get npm downloads
const npmApiUrl = `https://api.npmjs.org/downloads/point/last-month/${plugin.name}`
promises.push(
  fetch(npmApiUrl)
    .then((res) => (res.ok ? res.json() : null))
    .then((res) => {
      if (res) plugin.npmDownloads = res.downloads
    })
    .catch(() => {}),
)
// Fetch npm package details to get npm modified
const registryNpmApiUrl = `https://registry.npmjs.org/${plugin.name}`
promises.push(
  fetch(registryNpmApiUrl)
    .then((res) => (res.ok ? res.json() : null))
    .then((res) => {
      if (res) {
        plugin.datePublished = res.time.created
        plugin.dateModified = res.time.modified
      }
    })
    .catch(() => {}),
)
// Extract the GitHub repository owner and name from the URL
const githubUrlParts = plugin.href.split('/')
const githubOwner = githubUrlParts[3]
const githubRepo = githubUrlParts[4]
// Fetch GitHub repository details to get GitHub stars
const githubApiUrl = `https://api.github.com/repos/${githubOwner}/${githubRepo}`
promises.push(
  fetch(githubApiUrl)
    .then((res) => (res.ok ? res.json() : null))
    .then((res) => {
      if (res) plugin.githubStars = res.stargazers_count
    })
    .catch(() => {}),
)
// Update the item with fetched data
const readmeApiUrl = `https://api.github.com/repos/${githubOwner}/${githubRepo}/readme`
promises.push(
  fetchWithToken(readmeApiUrl)
    .then((res) => (res.ok ? res.json() : null))
    .then((res) => {
      if (res) {
        const tmp = marked.parse(Buffer.from(res.content, 'base64').toString('utf-8'))
        if (typeof tmp !== 'string') tmp.then((result) => (plugin.readme = result))
        else plugin.readme = tmp
      }
    })
    .catch(() => {}),
)

await Promise.all(promises)

const { slug: id } = Astro.params

const content: { title?: string; description?: string; image?: string; author?: string; ldJSON?: Object } = {}

if (plugin.title) content['title'] = plugin.title
if (plugin.description) content['description'] = plugin.description

content['ldJSON'] = {
  '@context': 'https://schema.org',
  '@type': 'WebPage',
  mainEntityOfPage: {
    '@type': 'WebPage',
    '@id': `${Astro.locals.runtimeConfig.public.baseUrl}/plugins/${id}`,
  },
  headline: plugin.description,
  image: [`${Astro.locals.runtimeConfig.public.baseUrl}/capgo_banner.webp`],
  publisher: {
    '@type': 'Organization',
    name: 'Capgo',
    logo: {
      '@type': 'ImageObject',
      url: `${Astro.locals.runtimeConfig.public.baseUrl}/icon.webp`,
    },
  },
  ...(plugin.hasOwnProperty('datePublished') && { datePublished: plugin.datePublished }),
  ...(plugin.hasOwnProperty('dateModified') && { dateModified: plugin.dateModified }),
}
---

<Layout {content}>
  <VuePluginPDP locale={Astro.locals.locale} {...plugin} client:load />
</Layout>
