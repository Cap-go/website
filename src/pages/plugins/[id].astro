---
import { marked } from 'marked'
import { actions } from '../../config/plugins'
import Layout from '../../layouts/Layout.astro'
import type { Plugin } from '../../config/plugins'
import { useRuntimeConfig } from '../../config/app'
import VuePluginPDP from '../../vue-pages/plugins/[id].vue'
import { fetchWithToken, getSlug } from '../../services/github'

export async function getStaticPaths() {
  let tutMap: any = {}
  const promises: any[] = []
  let processTuts: Plugin[] = []
  let tuts = await Astro.glob('../../content/plugins-tutorials/**/*.md')
  for (let i of tuts) {
    // Get the slug from the file path
    const slug = getSlug(i.file).replace('.md', '')
    // Get the content of the file
    tutMap[slug] = i.rawContent()
    // Get the tut from the actions set
    const findTut = actions.find((item) => getSlug(item.href) === slug)
    // If found, push it the parent array
    if (findTut && i.frontmatter['published'] !== false) processTuts.push(findTut)
  }
  let plugins: Plugin[] = processTuts
  for (let index = 0; index < processTuts.length; index++) {
    let item = processTuts[index]
    plugins[index].githubStars = 0
    plugins[index].npmDownloads = 0
    plugins[index].readme = marked.parse(`# ${item.title}\n\n${item.description}`)
    // Fetch npm package details to get npm downloads
    const npmApiUrl = `https://api.npmjs.org/downloads/point/last-month/${item.name}`
    promises.push(
      fetch(npmApiUrl)
        .then((res) => (res.ok ? res.json() : null))
        .then((res) => {
          if (res) plugins[index].npmDownloads = res.downloads
        })
        .catch((e) => {}),
    )
    // Fetch npm package details to get npm modified
    const registryNpmApiUrl = `https://registry.npmjs.org/${item.name}`
    promises.push(
      fetch(registryNpmApiUrl)
        .then((res) => (res.ok ? res.json() : null))
        .then((res) => {
          if (res) {
            plugins[index].datePublished = res.time.created
            plugins[index].dateModified = res.time.modified
          }
        })
        .catch((e) => {}),
    )
    // Extract the GitHub repository owner and name from the URL
    const githubUrlParts = item.href.split('/')
    const githubOwner = githubUrlParts[3]
    const githubRepo = githubUrlParts[4]
    // Fetch GitHub repository details to get GitHub stars
    const githubApiUrl = `https://api.github.com/repos/${githubOwner}/${githubRepo}`
    promises.push(
      fetch(githubApiUrl)
        .then((res) => (res.ok ? res.json() : null))
        .then((res) => {
          if (res) {
            plugins[index].githubStars = res.stargazers_count
          }
        })
        .catch((e) => {}),
    )
    // Update the item with fetched data
    const readmeApiUrl = `https://api.github.com/repos/${githubOwner}/${githubRepo}/readme`
    promises.push(
      fetchWithToken(readmeApiUrl)
        .then((res) => (res.ok ? res.json() : null))
        .then((res) => {
          if (res) plugins[index].readme = marked.parse(Buffer.from(res.content, 'base64').toString('utf-8'))
        })
        .catch((e) => {}),
    )
  }
  await Promise.all(promises)
  return plugins.map((item) => {
    let slug = getSlug(item.href)
    return {
      params: {
        id: slug,
      },
      props: {
        item,
        tutorial: tutMap[slug],
      },
    }
  })
}

const plugin = Astro.props.item
let tutorial = Astro.props.tutorial

if (tutorial) {
  plugin['tutorial'] = marked.parse(tutorial)
}

if (!plugin || !plugin.title) {
  return new Response(null, {
    status: 404,
  })
}

const content = {}

if (plugin.title) {
  // @ts-ignore
  content['title'] = plugin.title
}

if (plugin.description) {
  // @ts-ignore
  content['description'] = plugin.description
}

const config = useRuntimeConfig()

const { id } = Astro.params

// @ts-ignore
content['ldJSON'] = JSON.stringify({
  '@context': 'https://schema.org',
  '@type': 'WebPage',
  mainEntityOfPage: {
    '@type': 'WebPage',
    '@id': `${config.public.baseUrl}/plugins/${id}`,
  },
  headline: plugin.description,
  image: [`${config.public.baseUrl}/capgo_banner.webp`],
  publisher: {
    '@type': 'Organization',
    name: 'Capgo',
    logo: {
      '@type': 'ImageObject',
      url: `${config.public.baseUrl}/icon.webp`,
    },
  },
  ...(plugin.hasOwnProperty('datePublished') && { datePublished: plugin.datePublished }),
  ...(plugin.hasOwnProperty('dateModified') && { dateModified: plugin.dateModified }),
})
---

<Layout content={content}>
  <VuePluginPDP client:load {...plugin} />
</Layout>
