name: Deploy

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - development

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
      - run: bun install
      - run: bun run build
        env:
          BEARER_TOKEN: ${{ secrets.BEARER_TOKEN }}
          ORAMA_CLOUD_API_KEY: ${{ secrets.ORAMA_CLOUD_API_KEY }}
          ORAMA_CLOUD_ENDPOINT: ${{ secrets.ORAMA_CLOUD_ENDPOINT }}
          CLOUDFLARE_TURNSTILE_SITE_KEY: ${{ secrets.CLOUDFLARE_TURNSTILE_SITE_KEY }}
      
      - name: Set deployment variables
        id: vars
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            # Production deployment
            echo "branch=main" >> $GITHUB_OUTPUT
            echo "deployment_url=https://capgo.app" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref_name }}" == "development" ]; then
            # Development deployment
            echo "branch=development" >> $GITHUB_OUTPUT
            echo "deployment_url=https://development.capgo-website.pages.dev" >> $GITHUB_OUTPUT
          fi
          
      - name: Deploy to Cloudflare Pages
        run: bunx wrangler@latest pages deploy dist --project-name capgo-website --branch ${{ steps.vars.outputs.branch }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      
      - name: Comment deployment URL on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deploymentUrl = '${{ steps.vars.outputs.deployment_url }}';
            const branch = '${{ steps.vars.outputs.branch }}';
            const prNumber = context.issue.number;
            
            // Check if comment already exists
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🚀 Preview deployed')
            );
            
            const body = `🚀 **Preview deployed successfully!**

📝 **PR**: #${prNumber}
🌐 **Preview URL**: [${deploymentUrl}](${deploymentUrl})
🔧 **Branch**: \`${branch}\`
✅ **Status**: Ready for review

_This preview will be updated automatically when you push new commits to this PR._`;

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: body
              });
            }
